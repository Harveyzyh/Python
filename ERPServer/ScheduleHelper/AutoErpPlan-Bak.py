from SqlHelper import MsSqlHelper
from BaseHelper import Logger
import sys
from time import sleep
from datetime import datetime as dt


class AutoErpPlanHelperException(Exception):
	def __init__(self, errInf):
		self.__errInf = errInf
		super().__init__(self)

	def __str__(self):
		return self.__errInf


class AutoErpPlanHelper:
	def __init__(self, debug=False, logger=Logger(sys.path[0] + '/Log/debug.log'), host='192.168.0.99'):
		self.__logger = logger
		self.__debugMode = debug
		self.__host = host

		self.__mssql = None

		self.__workEnableFlag = False
		self.__bomCalculateEnableFlag = False
		self.__pzCalculateEnableFlag = False
		self.__lockCgPlanEnableFlag = False
		self.__lockScPlanEnableFlag = False
		self.__layoutCgPlanEnableFlag = False
		self.__layoutScPlanEnableFlag = False

		self.workingFlag = False

	def __log(self, string, mode='info'):
		if mode == 'info':
			self.__logger.logger.info('AutoErpPlan: {}'.format(string))
		elif mode == 'error':
			self.__logger.logger.error('AutoErpPlan: {}'.format(string))
		elif mode == 'warning':
			self.__logger.logger.warning('AutoErpPlan: {}'.format(string))

	def __del(self):
		del self.__mssql
		self.__mssql = None
		self.__workEnableFlag = False
		self.__bomCalculateEnableFlag = False
		self.__pzCalculateEnableFlag = False
		self.__lockCgPlanEnableFlag = False
		self.__lockScPlanEnableFlag = False
		self.__layoutCgPlanEnableFlag = False
		self.__layoutScPlanEnableFlag = False

	def __str_to_hex(self, s):
		returnStr = ''
		for c in s:
			strTmp = hex(ord(c)).replace('0x', '').upper()
			if len(strTmp) == 2:
				strTmp2 = strTmp + '00'
			else:
				strTmp2 = strTmp[2:4] + strTmp[0:2]
			returnStr += strTmp2
		return returnStr

	def __int_to_hex(self, i):
		returnStr = ''
		strTmp = str(hex(i)).replace('0x', '').rjust(2, '0').upper()
		if len(strTmp) == 2:
			strTmp2 = strTmp + '00'
		else:
			strTmp2 = strTmp[2:4] + strTmp[0:2]
		returnStr += strTmp2
		return returnStr

	def work(self, mode='title'):
		try:
			self.__log('Work Start')
			self.workingFlag = True

			self.__mssql = MsSqlHelper(host=self.__host, user='sa', passwd='comfortgroup2016{', database='COMFORT')

			# 获取配置信息
			self.__getEnableFlag()

			# 当程序使能为True时才工作
			if self.__workEnableFlag:
				# 先把有问题的单据清理 By Proc
				self.__resetWorkFlag()

				while self.workingFlag:
					self.__work()

		except Exception as e:
			self.workingFlag = False
			self.__log(str(e), mode='error')

		finally:
			self.workingFlag = False
			self.__del()
			self.__log('Work Finished')

	def __getEnableFlag(self):
		__sqlStr1 = "SELECT Valid FROM WG_DB.dbo.WG_CONFIG WHERE ConfigName = 'AutoErpPlan' AND Type = 'Work' " \
		            "AND Valid = 'Y'"
		__sqlStr2 = "SELECT Valid FROM WG_DB.dbo.WG_CONFIG WHERE ConfigName = 'AutoErpPlan' AND Type = 'BomCaculate' " \
		            "AND Valid = 'Y'"
		__sqlStr3 = "SELECT Valid FROM WG_DB.dbo.WG_CONFIG WHERE ConfigName = 'AutoErpPlan' AND Type = 'PzCaculate' " \
		            "AND Valid = 'Y'"
		__sqlStr4 = "SELECT Valid FROM WG_DB.dbo.WG_CONFIG WHERE ConfigName = 'AutoErpPlan' AND Type = 'LayoutScPlan' " \
		            "AND Valid = 'Y'"
		__sqlStr5 = "SELECT Valid FROM WG_DB.dbo.WG_CONFIG WHERE ConfigName = 'AutoErpPlan' AND Type = 'LayoutCgPlan' " \
		            "AND Valid = 'Y'"
		__sqlStr6 = "SELECT Valid FROM WG_DB.dbo.WG_CONFIG WHERE ConfigName = 'AutoErpPlan' AND Type = 'LockScPlan' " \
		            "AND Valid = 'Y'"
		__sqlStr7 = "SELECT Valid FROM WG_DB.dbo.WG_CONFIG WHERE ConfigName = 'AutoErpPlan' AND Type = 'LockCgPlan' " \
		            "AND Valid = 'Y'"

		self.__workEnableFlag = True if self.__mssql.sqlWork(__sqlStr1) is not None else False
		self.__bomCalculateEnableFlag = True if self.__mssql.sqlWork(__sqlStr2) is not None else False
		self.__pzCalculateEnableFlag = True if self.__mssql.sqlWork(__sqlStr3) is not None else False
		self.__layoutScPlanEnableFlag = True if self.__mssql.sqlWork(__sqlStr4) is not None else False
		self.__layoutCgPlanEnableFlag = True if self.__mssql.sqlWork(__sqlStr5) is not None else False
		self.__lockScPlanEnableFlag = True if self.__mssql.sqlWork(__sqlStr6) is not None else False
		self.__lockCgPlanEnableFlag = True if self.__mssql.sqlWork(__sqlStr7) is not None else False

	def __resetWorkFlag(self):
		self.__log('清除额外情况，见COMFORT.dbo.P_Auto_ErpPlan_CleanErr')
		__sqlStr = "exec dbo.P_Auto_ErpPlan_CleanErr "
		self.__mssql.sqlWork(__sqlStr)

	def __work(self):
		__sqlStrDd = "SELECT TOP 1 planDd, planId FROM V_GetAutoErpPlanOrderDetail ORDER BY UDF12, planDd "

		__getDd = self.__mssql.sqlWork(__sqlStrDd)
		if __getDd is not None:
			for __getDdTmp in __getDd:
				self.__log('Work With PlanDd:{planDd}  PlanId:{planId}'.format(planDd=__getDdTmp[0],
				                                                               planId=__getDdTmp[1]))
				self.__updateWorkFlagDetail(planDd=__getDdTmp[0])
				__phList = self.__getPhList(__getDdTmp[0])
				self.__calculate(__phList)
				self.__generate(planDd=__getDdTmp[0], planId=__getDdTmp[1])
				self.__lockPlan(planId=__getDdTmp[1], planType=['sc', 'cg'])
				self.__layoutPlan(planId=__getDdTmp[1], planType=['sc', 'cg'])
				self.__cleanPlan(planId=__getDdTmp[1])
				self.__updateDoneFlagDetail(planDd=__getDdTmp[0])
		else:
			self.workingFlag = False
			self.__log('Not Found Order List!')

	# def __resetLrpFlag(self):
	# 	__sqlStr = "SELECT TD001+'-'+TD002+TD003, UDF12, LRPDATE FROM COMFORT.dbo.COPTD " \
	# 	           "WHERE LRPFLAG='Y' AND UDF12>LRPDATE ORDER BY UDF12 "
	# 	__sqlStr2 = "UPDATE COMFORT.dbo.COPTD SET LRPFLAG='N', LRPCOUNT=0 " \
	# 	            "WHERE LRPFLAG='Y' AND UDF12>LRPDATE "
	# 	__get = self.__mssql.sqlWork(sqlStr=__sqlStr)
	# 	if __get is not None:
	# 		self.__log('Find reset list: {}'.format(str(__get)))
	# 		self.__mssql.sqlWork(__sqlStr2)

	def __getJobId(self):
		__sqlStr = "EXEC COMFORT.dbo.P_GETJOBID "
		__getData = self.__mssql.sqlWork(__sqlStr)
		if __getData is not None:
			return __getData[0]
		else:
			raise AutoErpPlanHelperException('Can not get job Id, Please check the program!')

	def __insertJob(self, jobName, jobOption, progName='', creator='Robot'):
		__sqlStrIns = "INSERT INTO DSCSYS.dbo.JOBQUEUE ([JOBID], [SUBID], [COMPANYID], [USERID], [USEDALIAS], [JOBNAME], " \
		              "[EXTNAME], [COMPROGID], [JOBOPTION], [GENTYPE], [GENSTATUS], [PRIORITY], [STATUS], [PROGRESS], " \
		              "[DTREQUEST], [DTRECEIVE], [DTSCHEDULE], [DTSTART], [DTFINISH], [RESULT], [STYLE], [PROCESSER], " \
		              "[FLAG], [NOTIFY]) " \
		              "VALUES ('{jobId}', '{subId}', 'COMFORT', '{creator}', 'COMFORT', '{jobName}', '', " \
		              "'{progName}', {hexStr}, 1, 1, 3, 'N', NULL, getdate(), getdate(), getdate(), " \
		              "NULL, NULL, NULL, 'B', '', 1, '');"

		__progName = jobName + 'S.Class1' if progName == '' else progName

		__jobId = []

		try:
			__jobId = self.__getJobId()
			self.__mssql.sqlWork(__sqlStrIns.format(hexStr=jobOption, jobId=__jobId[0], subId=__jobId[1],
			                                        creator=creator, jobName=jobName, progName=__progName))
		except:
			__jobId = self.__getJobId()
			self.__mssql.sqlWork(__sqlStrIns.format(hexStr=jobOption, jobId=__jobId[0], subId=__jobId[1],
			                                        creator=creator, jobName=jobName, progName=__progName))

		return __jobId[0]

	def __getPhList(self, dd):
		__sqlStr = "SELECT DISTINCT RTRIM(TD004), RTRIM(TD053) FROM COMFORT.dbo.COPTD " \
		           "INNER JOIN COMFORT.dbo.INVMB ON TD004 = MB001 " \
		           "WHERE TD001+'-'+TD002+TD003 = '{dd}' " \
		           "AND MB025 NOT IN ('P') "
		__get = self.__mssql.sqlWork(__sqlStr.format(dd=dd))
		return __get

	def __calculate(self, phList=None):
		if phList is not None:
			self.__log('Calculate PhList: {}'.format(str(phList)))
			for phListTmp in phList:
				if self.__bomCalculateEnableFlag:
					jobId = self.__bomSingleCalculate(phListTmp[0])
					self.__checkJobDone(jobId)

				if self.__pzCalculateEnableFlag:
					if phListTmp[1] is not None:
						jobId = self.__pzSingleCalculate01(phListTmp[0], phListTmp[1])
						self.__checkJobDone(jobId)
		else:
			self.__log('Calculate: Not Found PhList!', mode='warning')

	def __bomSingleCalculate(self, ph):
		hexStr = "0x44532056415249414E54202030313030380100000C2000000100000000000000010000000C2000000100000001000000" \
		         "030000000C20000001000000000000000100000008000000060000000990E9623B4EF64EC154F753080000000400000073" \
		         "007000300031000C20000001000000000000000100000008000000070000001F7510624C006F0067008765636808000000" \
		         "06000000630068006B004C006F0067000C20000001000000000000000100000008000000040000005C4F1A4EE5651F6708" \
		         "0000000B000000650064005000720069006E00740044006100740065000C2000000100000001000000030000000C200000" \
		         "0100000000000000020000000800000001000000040008000000{phLen}0000{ph}08000000{phLen}0000{ph}08000000" \
		         "010000004E000800000000000000"

		phStr = self.__str_to_hex(ph)
		phLenStr = self.__int_to_hex(len(ph))

		__jobId = self.__insertJob(jobName='BOMB05', jobOption=hexStr.format(ph=phStr, phLen=phLenStr))

		self.__log('Insert Job BomCalculate: {}'.format('品号 :' + str(ph) + ' - JobId: ' + str(__jobId)))
		return __jobId

	def __pzSingleCalculate01(self, ph, pz):
		phStr = self.__str_to_hex(ph)
		phLenStr = self.__int_to_hex(len(ph))
		pzStr = self.__str_to_hex(pz)
		pzLenStr = self.__int_to_hex(len(pz))

		hexStr = "0x44532056415249414E54202030313030740100000C2000000100000000000000010000000C2000000100000001000000" \
		         "040000000C2000000100000000000000010000000800000002000000C154F753080000000400000065006400300031000C" \
		         "20000001000000000000000100000008000000060000000990E9624D916E7FB96548680800000004000000730070003000" \
		         "31000C20000001000000000000000100000008000000070000001F7510624C006F00670087656368080000000600000063" \
		         "0068006B004C006F0067000C20000001000000000000000100000008000000040000005C4F1A4EE5651F67080000000B00" \
		         "0000650064005000720069006E00740044006100740065000C20000001000000010000000400000008000000{phLen}000" \
		         "0{ph}0C200000010000000000000001000000080000000100000005000C20000001000000000000000000000008000000" \
		         "{pzLen}0000{pz}08000000010000004E000800000000000000"

		__jobId = self.__insertJob(jobName='COPAB01', jobOption=hexStr.format(ph=phStr, phLen=phLenStr, pz=pzStr,
		                                                                      pzLen=pzLenStr))

		self.__log('Insert Job PzCalculate: {}'.format('品号: ' + str(ph) + ' - 配置: ' + str(pz) + ' - JobId: '
		                                               + str(__jobId)))

		return __jobId

	def __checkJobDone(self, jobId):
		__sqlStr = "SELECT JOBID FROM DSCSYS.dbo.JOBQUEUE WHERE JOBID = '{jobId}' AND STATUS != 'D' "
		__getData = []
		while __getData is not None:
			sleep(0.5)
			__getData = self.__mssql.sqlWork(__sqlStr.format(jobId=jobId))
		self.__log('Job Done: {}'.format('JobId:' + str(jobId)))

	def __generate(self, planDd, planId):
		__jobId = self.__generatePlanDetail(planId=planId, planDd=planDd)
		self.__checkJobDone(__jobId)

	def __generatePlanDetail(self, planDd, planId):
		hexStrBoth = "0x44532056415249414E54202030313030C40700000C2000000100000000000000010000000C20000001000000010000" \
		             "00180000000C20000001000000000000000100000008000000060000000990E962A18B12529D4F6E6308000000050000" \
		             "00630062006F00300031000C20000001000000000000000100000008000000040000000990E962E55D82530800000004" \
		             "00000065006400300032000C20000001000000000000000100000008000000060000000990E9626567906E167FF75308" \
		             "0000000400000073007000300033000C2000000100000000000000010000000800000006000000938F6551A18B125279" \
		             "62F75308000000050000006D0065006400300034000C20000001000000000000000100000008000000040000000990E9" \
		             "62D34E935E080000000400000073007000300035000C20000001000000000000000100000008000000060000000990E9" \
		             "626588278D3F65567B0800000005000000630062006F00300036000C2000000100000000000000010000000800000006" \
		             "0000000097426CA18B977BB9650F5F0800000005000000720064006700300037000C2000000100000000000000010000" \
		             "00080000000600000003805186895B6851585BCF910800000005000000630068006B00300038000C2000000100000000" \
		             "00000001000000080000000C0000000097426CE5651F670E5484769B4FD97EB37E6551A18B977B080000000600000063" \
		             "0068006B003000380031000C200000010000000000000001000000080000000C0000000097426CE5651F670E54847600" \
		             "97426CB37E6551A18B977B0800000006000000630068006B003000380032000C20000001000000000000000100000008" \
		             "000000080000000990E96200971F7510628476A18B12520800000005000000630062006F00300039000C200000010000" \
		             "000000000001000000080000000C000000F95B8E4EF25DD1533E659965F64E847665884551B9650F5F08000000050000" \
		             "00630062006F00310030000C20000001000000000000000100000008000000090000001F7510620097426C3A4EF69684" \
		             "769965F64E0800000005000000630068006B00310031000C2000000100000000000000010000000800000008000000D6" \
		             "53FF66E34E9965B37E6551A18B977B0800000005000000630068006B00310032000C2000000100000000000000010000" \
		             "000800000008000000A25B37629B4F9965B37E6551A18B977B0800000007000000630068006B00300037005F0031000C" \
		             "200000010000000000000001000000080000000B0000000990E9624D0050005300A18B1252005FE55DE5651F67080000" \
		             "000400000073007000310036000C2000000100000000000000010000000800000005000000038051865F631780877308" \
		             "00000005000000630068006B00310033000C2000000100000000000000010000000800000005000000A18B977B5D4E27" \
		             "59CF910800000005000000630068006B00300039000C2000000100000000000000010000000800000008000000085476" \
		             "5EA18B977B00674E4F6588CF910800000005000000630068006B00310034000C20000001000000000000000100000008" \
		             "000000070000004151B88BF76D7962D653FF66E34E0800000005000000630068006B00310035000C2000000100000000" \
		             "00000001000000080000000200000048722C67080000000400000065006400310036000C200000010000000000000001" \
		             "00000008000000020000002760288D0800000005000000630062006F00310037000C2000000100000000000000010000" \
		             "0008000000070000001F7510624C006F006700876563680800000006000000630068006B004C006F0067000C20000001" \
		             "000000000000000100000008000000040000005C4F1A4EE5651F67080000000B000000650064005000720069006E0074" \
		             "0044006100740065000C2000000100000001000000180000000C20000001000000000000000100000003000000010000" \
		             "00080000000400000031002E00A28B55530800000002000000300031000C200000010000000000000001000000080000" \
		             "000100000005000C20000001000000000000000000000008000000{planDdLen}0000{planDd}08000000{planIdLen}" \
		             "0000{planId}0C200000010000000000000000000000080000000100000005000C200000010000000000000001000000" \
		             "08000000010000004C0008000000080000004C002E0009634C00520050000097426C0C20000001000000000000000100" \
		             "000003000000020000000800000003000000DB6B0097426C0800000001000000590008000000010000004E0008000000" \
		             "010000004E000C2000000100000000000000010000000300000003000000080000000400000033002E006851E8900C20" \
		             "00000100000000000000010000000300000002000000080000000600000032002E00CD91B06565884551080000000100" \
		             "00004E0008000000010000004E0008000000010000004E000C2000000100000000000000020000000800000001000000" \
		             "04000800000000000000080000000000000008000000010000004E0008000000010000004E0008000000010000004E00" \
		             "08000000010000004E00080000000400000030003000300031000C200000010000000000000001000000030000000100" \
		             "0000080000000400000031002E0009674865080000000100000059000800000000000000"

		planDdStr = self.__str_to_hex(str(planDd))
		planDdLenStr = self.__int_to_hex(len(str(planDd)))
		planIdStr = self.__str_to_hex(str(planId))
		planIdLenStr = self.__int_to_hex(len(str(planId)))

		__jobId = self.__insertJob(jobName='LRPMB01', jobOption=hexStrBoth.format(planDd=planDdStr,
		                                                                          planDdLen=planDdLenStr,
		                                                                          planId=planIdStr,
		                                                                          planIdLen=planIdLenStr))

		self.__log('Insert Job Generate Plan: 订单号: {}'.format(str(planDd)))
		return __jobId

	def __lockPlan(self, planId, planVer='0001', planType=None):
		if planType is None:
			self.__log(mode='error', string='Func lockPlan lack of param planType')
		else:
			planId2 = planId.ljust(20, ' ')
			if 'sc' in planType and self.__lockScPlanEnableFlag:
				__jobId = self.__lockScPlan(planId=planId2, planVer=planVer)
				self.__checkJobDone(__jobId)
			if 'cg' in planType and self.__lockCgPlanEnableFlag:
				__jobId = self.__lockCgPlan(planId=planId2, planVer=planVer)
				self.__checkJobDone(__jobId)

	def __lockScPlan(self, planId, planVer):
		hexStr = "0x44532056415249414E54202030313030AE0400000C2000000100000000000000010000000C20000001000000010000000E" \
		         "0000000C20000001000000000000000100000008000000040000000990E962C154F753080000000400000073007000300031" \
		         "000C20000001000000000000000100000008000000040000000990E962E55D8253080000000400000065006400300032000C" \
		         "20000001000000000000000100000008000000040000000990E962D34E935E080000000400000073007000300033000C2000" \
		         "0001000000000000000100000008000000050000000990E9628C5BE55DE565080000000400000073007000300034000C2000" \
		         "0001000000000000000100000008000000060000000990E962A18B12527962F753080000000400000073007000300035000C" \
		         "20000001000000000000000100000008000000060000000990E962E55D555355532B52080000000400000065006400300036" \
		         "000C20000001000000000000000100000008000000060000000990E962A18B1252BA4E585408000000040000006500640030" \
		         "0037000C20000001000000000000000100000008000000060000000990E96201959A5BB67201600800000005000000720064" \
		         "006700300038000C200000010000000000000001000000080000000B000000C54E8894F95BC6620652B08B555FDB8F4C8801" \
		         "959A5B0800000005000000630068006B00300039000C200000010000000000000001000000080000000B000000C54E8894F9" \
		         "5BC6620652B08B555FD653886D01959A5B0800000005000000630068006B00310030000C2000000100000000000000010000" \
		         "0008000000070000000C54656B01959A5BA74E1062C1540800000005000000630068006B00310031000C2000000100000000" \
		         "0000000100000008000000090000000C54656BD653886D01959A5BA74E1062C1540800000005000000630068006B00310032" \
		         "000C20000001000000000000000100000008000000070000001F7510624C006F006700876563680800000006000000630068" \
		         "006B004C006F0067000C20000001000000000000000100000008000000040000005C4F1A4EE5651F67080000000B00000065" \
		         "0064005000720069006E00740044006100740065000C20000001000000010000000E0000000C200000010000000000000002" \
		         "000000080000000100000004000800000000000000080000000000000008000000000000000C200000010000000000000002" \
		         "00000008000000010000000400080000000000000008000000000000000C2000000100000000000000020000000800000001" \
		         "0000000400080000000000000008000000000000000C20000001000000000000000200000008000000010000000400080000" \
		         "0018000000{planId}{planVer}0800000018000000{planId}{planVer}080000000000000008000000000000000C200000" \
		         "0100000000000000010000000300000001000000080000000200000001959A5B08000000010000004E000800000001000000" \
		         "4E0008000000010000004E0008000000010000004E0008000000010000004E000800000000000000"

		planIdStr = self.__str_to_hex(str(planId))
		planVerStr = self.__str_to_hex(str(planVer))

		__jobId = self.__insertJob(jobName='LRPB02', jobOption=hexStr.format(planId=planIdStr, planVer=planVerStr))

		self.__log('Insert Job Lock SC Plan: {}'.format(str(planId)))
		return __jobId

	def __lockCgPlan(self, planId, planVer):
		hexStr = "0x44532056415249414E54202030313030B00300000C2000000100000000000000010000000C20000001000000010000000A" \
		         "0000000C20000001000000000000000100000008000000040000000990E962C154F753080000000400000073007000300031" \
		         "000C20000001000000000000000100000008000000040000000990E962E55D8253080000000400000065006400300032000C" \
		         "20000001000000000000000100000008000000040000000990E962D34E935E080000000400000073007000300033000C2000" \
		         "0001000000000000000100000008000000050000000990E962A44E278DE565080000000400000073007000300034000C2000" \
		         "0001000000000000000100000008000000050000000990E962C7912D8DE565080000000400000073007000300035000C2000" \
		         "0001000000000000000100000008000000060000000990E962A18B12527962F753080000000400000073007000300036000C" \
		         "20000001000000000000000100000008000000060000000990E962A18B1252BA4E5854080000000400000065006400300037" \
		         "000C20000001000000000000000100000008000000060000000990E96201959A5BB672016008000000040000007200670030" \
		         "0038000C20000001000000000000000100000008000000070000001F7510624C006F00670087656368080000000600000063" \
		         "0068006B004C006F0067000C20000001000000000000000100000008000000040000005C4F1A4EE5651F67080000000B0000" \
		         "00650064005000720069006E00740044006100740065000C20000001000000010000000A0000000C20000001000000000000" \
		         "0002000000080000000100000004000800000000000000080000000000000008000000000000000C20000001000000000000" \
		         "000200000008000000010000000400080000000000000008000000000000000C200000010000000000000002000000080000" \
		         "00010000000400080000000000000008000000000000000C2000000100000000000000020000000800000001000000040008" \
		         "0000000000000008000000000000000C200000010000000000000002000000080000000100000004000800000018000000" \
		         "{planId}{planVer}0800000018000000{planId}{planVer}08000000000000000C20000001000000000000000100000003" \
		         "00000001000000080000000200000001959A5B08000000010000004E000800000000000000"

		planIdStr = self.__str_to_hex(str(planId))
		planVerStr = self.__str_to_hex(str(planVer))

		__jobId = self.__insertJob(jobName='LRPB04', jobOption=hexStr.format(planId=planIdStr, planVer=planVerStr))

		self.__log('Insert Job Lock CG Plan: {}'.format(str(planId)))
		return __jobId

	def __layoutPlan(self, planId, planVer='0001', planType=None):
		if planType is None:
			self.__log(mode='error', string='Func layoutPlan lack of param planType')
		else:
			if 'sc' in planType and self.__layoutScPlanEnableFlag:
				__jobId = self.__layoutScPlan(planId=planId, planVer=planVer)
				self.__checkJobDone(__jobId)
			if 'cg' in planType and self.__layoutCgPlanEnableFlag:
				__jobId = self.__layoutCgPlan(planId=planId, planVer=planVer)
				self.__checkJobDone(__jobId)

	def __layoutScPlan(self, planId, planVer):
		hexStr = "0x44532056415249414E54202030313030C20500000C2000000100000000000000010000000C200000010000000100000011" \
		         "0000000C20000001000000000000000100000008000000040000000990E962C154F753080000000400000073007000300031" \
		         "000C20000001000000000000000100000008000000050000000990E9628C5BE55DE565080000000400000073007000300032" \
		         "000C20000001000000000000000100000008000000060000000990E962A18B12527962F75308000000040000007300700030" \
		         "0033000C20000001000000000000000100000008000000040000000990E962E55D8253080000000400000065006400300034" \
		         "000C20000001000000000000000100000008000000060000000990E9621F75A74ED34E935E08000000040000007300700030" \
		         "0035000C20000001000000000000000100000008000000040000000990E962B6720160080000000400000072006700300036" \
		         "000C20000001000000000000000100000008000000060000000990E962E55D555355532B5208000000040000006500640030" \
		         "0037000C20000001000000000000000100000008000000060000000990E962E55D55532760288D0800000005000000630062" \
		         "006F00300038000C20000001000000000000000100000008000000060000000990E962A18B1252BA4E585408000000040000" \
		         "0065006400300039000C20000001000000000000000100000008000000100000000C54A18B12527962F7532C00C154F75320" \
		         "000854765E10620C54004EE55D55530800000005000000630068006B00310030000C20000001000000000000000100000008" \
		         "0000000E000000D1533E65D4591659E55D55538476D45916595553F74E3A4EF69605800800000005000000630068006B0031" \
		         "0031000C200000010000000000000001000000080000001F00000042004F004D002C00005FE55D2C008498A18B86989965E5" \
		         "652C008C5BE55DE5650F5C8E4ED1533E65E5651F67F46639650E4ED1533E65E5651F67F8760C540800000005000000630068" \
		         "006B00310032000C2000000100000000000000010000000800000006000000938F6551D1533E65E5651F6708000000040000" \
		         "006D006500310033000C2000000100000000000000010000000800000006000000D1533E6592638F5E9D4F6E630800000007" \
		         "000000630062006F00300039005F0031000C2000000100000000000000010000000800000004000000CD91D6535553F74E08" \
		         "00000005000000630068006B00310034000C20000001000000000000000100000008000000070000001F7510624C006F0067" \
		         "00876563680800000006000000630068006B004C006F0067000C20000001000000000000000100000008000000040000005C" \
		         "4F1A4EE5651F67080000000B000000650064005000720069006E00740044006100740065000C200000010000000100000011" \
		         "0000000C20000001000000000000000200000008000000010000000400080000000000000008000000000000000C20000001" \
		         "000000000000000200000008000000010000000400080000000000000008000000000000000C200000010000000000000001" \
		         "000000080000000100000005000C2000000100000000000000000000000800000018000000{planId}{planVer}080000000" \
		         "00000000C20000001000000000000000200000008000000010000000400080000000000000008000000000000000C2000000" \
		         "10000000000000001000000030000000200000008000000020000006851E89008000000000000000C2000000100000000000" \
		         "00001000000030000000300000008000000020000006851E890080000000000000008000000010000004E000800000001000" \
		         "0004E00080000000100000059000800000008000000{dateStr}0C20000001000000000000000" \
		         "100000003000000010000000800000004000000A18B12527962F75308000000010000004E0008000000010000004E0008000" \
		         "00000000000"

		planIdStr = self.__str_to_hex(planId.ljust(20, ' '))
		planVerStr = self.__str_to_hex(str(planVer))
		dateStr = self.__str_to_hex(str(dt.now().strftime('%Y%m%d')))

		__jobId = self.__insertJob(jobName='LRPMB03', jobOption=hexStr.format(planId=planIdStr, planVer=planVerStr,
		                                                                      dateStr=dateStr))

		self.__log('Insert Job Layout Sc Plan: {}'.format(str(planId)))
		return __jobId

	def __layoutCgPlan(self, planId, planVer):
		return ''

	def __cleanPlan(self, planId, planVer='0001'):
		__jobId = self.__cleanAllPlan(planId=planId, planVer=planVer)
		self.__checkJobDone(__jobId)

	def __cleanAllPlan(self, planId, planVer):
		hexStr = "0x44532056415249414E54202030313030980500000C2000000100000000000000010000000C200000010000000100000011" \
		         "0000000C20000001000000000000000100000008000000040000001F75A74EA18B1252080000000600000067006200300031" \
		         "005F0031000C2000000100000000000000010000000800000004000000C7912D8DA18B125208000000060000006700620030" \
		         "0031005F0032000C2000000100000000000000010000000800000004000000A18B1252B08B555F0800000006000000670062" \
		         "00300031005F0033000C20000001000000000000000100000008000000040000000990E962B6720160080000000400000072" \
		         "006700300032000C20000001000000000000000100000008000000060000000990E962A18B12527962F75308000000040000" \
		         "0073007000300033000C20000001000000000000000100000008000000060000000990E962A18B1252E5651F670800000004" \
		         "00000073007000300034000C20000001000000000000000100000008000000040000000990E962C154F75308000000040000" \
		         "0073007000300035000C20000001000000000000000100000008000000090000000990E962A44E278DE5652F008C5BE55DE5" \
		         "65080000000400000073007000300036000C20000001000000000000000100000008000000040000000990E962E55D825308" \
		         "0000000400000065006400300037000C20000001000000000000000100000008000000040000000990E962D34E935E080000" \
		         "000400000073007000300038000C2000000100000000000000010000000800000003000000E55D5C4FF75308000000060000" \
		         "0067006200300031005F0034000C20000001000000000000000100000008000000040000000990E9622760288D0800000005" \
		         "000000630062006F00310031000C200000010000000000000001000000080000000C000000205264960C54004EA18B125279" \
		         "62F7534062096748722C670800000005000000630068006B00310032000C200000010000000000000001000000080000000B" \
		         "000000C54E20526496F25D6851E890D1533E658476A18B12520800000005000000630068006B00310033000C200000010000" \
		         "00000000000100000008000000050000000990E962E55D5C4FF753080000000400000073007000310035000C200000010000" \
		         "00000000000100000008000000070000001F7510624C006F006700876563680800000006000000630068006B004C006F0067" \
		         "000C20000001000000000000000100000008000000040000005C4F1A4EE5651F67080000000B000000650064005000720069" \
		         "006E00740044006100740065000C200000010000000100000011000000080000000100000059000800000001000000590008" \
		         "0000000100000059000C200000010000000000000001000000030000000200000008000000020000006851E8900C20000001" \
		         "0000000000000001000000080000000100000005000C2000000100000000000000000000000800000018000000" \
		         "{planId}{planVer}0C200000010000000000000002000000080000000100000004000800000000000000080000000000000" \
		         "00C20000001000000000000000200000008000000010000000400080000000000000008000000000000000C2000000100000" \
		         "0000000000200000008000000010000000400080000000000000008000000000000000800000002000000300031000C20000" \
		         "00100000000000000020000000800000001000000040008000000000000000800000000000000080000000100000059000C2" \
		         "000000100000000000000010000000300000004000000080000000400000034002E006851E89008000000010000004E00080" \
		         "00000010000004E000C200000010000000000000002000000080000000100000004000800000000000000080000000000000" \
		         "008000000010000004E000800000000000000"

		planIdStr = self.__str_to_hex(planId.ljust(20, ' '))
		planVerStr = self.__str_to_hex(str(planVer))

		__jobId = self.__insertJob(jobName='LRPB06', jobOption=hexStr.format(planId=planIdStr, planVer=planVerStr))
		self.__log('Insert Job Clean Plan: {}'.format(str(planId)))
		return __jobId

	def __updateWorkFlagDetail(self, planDd):
		__sqlStr = "UPDATE COMFORT.dbo.COPTD SET LRPFLAG = 'y' WHERE TD001+'-'+TD002+TD003 = '{planDd}' "
		self.__mssql.sqlWork(__sqlStr.format(planDd=planDd))
		self.__log('Update Work Flag - Title: {}'.format(planDd))

	def __updateDoneFlagDetail(self, planDd):
		__sqlStr = "UPDATE COMFORT.dbo.COPTD SET LRPFLAG='Y', LRPDATE=LEFT(dbo.f_getTime(1), 12), LRPCOUNT=LRPCOUNT+1 " \
		           "WHERE TD001+'-'+TD002+TD003 = '{planDd}' "
		self.__mssql.sqlWork(__sqlStr.format(planDd=planDd))
		self.__log('Update Done Flag - Title: {}'.format(planDd))
