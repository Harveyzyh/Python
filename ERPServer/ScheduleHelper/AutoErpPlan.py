from SqlHelper import MsSqlHelper
from BaseHelper import Logger
import sys
from time import sleep
from datetime import datetime as dt


class AutoErpPlanHelperException(Exception):
	def __init__(self, errInf):
		self.__errInf = errInf
		super().__init__(self)

	def __str__(self):
		return self.__errInf


class AutoErpPlanHelper:
	def __init__(self, debug=False, logger=Logger(sys.path[0] + '/Log/debug.log'), host='192.168.0.99'):
		self.__logger = logger
		self.__debugMode = debug
		self.__host = host

		self.__mssql = None
		
		# 配置信息
		self.__workEnableFlag = False
		self.__bomCalculateEnableFlag = False
		self.__pzCalculateEnableFlag = False
		self.__lockCgPlanEnableFlag = False
		self.__lockScPlanEnableFlag = False
		self.__layoutCgPlanEnableFlag = False
		self.__layoutScPlanEnableFlag = False
		self.__lrpCount = 3
		
		# 单个订单是否需要发放请购单的flag
		self.__layoutCgPlanEnableTmpFlag = False
		
		# 是否存在客户配置的flag，不存在则跳过多次重计
		self.__hasKhpzFlag = False

		self.workingFlag = False

	def __log(self, string, mode='info'):
		if mode == 'info':
			self.__logger.logger.info('AutoErpPlan: {}'.format(string))
		elif mode == 'error':
			self.__logger.logger.error('AutoErpPlan: {}'.format(string))
		elif mode == 'warning':
			self.__logger.logger.warning('AutoErpPlan: {}'.format(string))

	def __del(self):
		del self.__mssql
		self.__mssql = None
		self.__workEnableFlag = False
		self.__bomCalculateEnableFlag = False
		self.__pzCalculateEnableFlag = False
		self.__lockCgPlanEnableFlag = False
		self.__lockScPlanEnableFlag = False
		self.__layoutCgPlanEnableFlag = False
		self.__layoutScPlanEnableFlag = False
		self.__layoutScPlanEnableTmpFlag = False
		self.__lrpCount = 3

	def __str_to_hex(self, s):
		returnStr = ''
		for c in s:
			strTmp = hex(ord(c)).replace('0x', '').upper()
			if len(strTmp) == 2:
				strTmp2 = strTmp + '00'
			else:
				strTmp2 = strTmp[2:4] + strTmp[0:2]
			returnStr += strTmp2
		return returnStr

	def __int_to_hex(self, i):
		returnStr = ''
		strTmp = str(hex(i)).replace('0x', '').rjust(2, '0').upper()
		if len(strTmp) == 2:
			strTmp2 = strTmp + '00'
		else:
			strTmp2 = strTmp[2:4] + strTmp[0:2]
		returnStr += strTmp2
		return returnStr

	def work(self, mode='title'):
		try:
			self.__log('Work Start')
			self.workingFlag = True

			self.__mssql = MsSqlHelper(host=self.__host, user='sa', passwd='comfortgroup2016{', database='COMFORT')

			# 获取配置信息
			self.__getEnableFlag()

			# 当程序使能为True时才工作
			if self.__workEnableFlag:
				self.__resetWorkingFlag()
				# 先把有问题的单据清理
				self.__resetWorkOtherFlag()

				while self.workingFlag:
					self.__work()

		except Exception as e:
			self.workingFlag = False
			self.__log(str(e), mode='error')

		finally:
			self.workingFlag = False
			self.__resetWorkingFlag()
			self.__del()
			self.__log('Work Finished')
			
	def test(self):
		print('test')
		# self.__mssql = MsSqlHelper(host=self.__host, user='sa', passwd='comfortgroup2016{', database='COMFORT')
		# self.__layoutCgPlan('ZYH', '0001')
		print('done')

	def __getEnableFlag(self):
		__sqlStr1 = "SELECT Valid FROM WG_DB.dbo.WG_CONFIG WHERE ConfigName = 'AutoErpPlan' AND Type = 'Work' " \
		            "AND Valid = 'Y'"
		__sqlStr2 = "SELECT Valid FROM WG_DB.dbo.WG_CONFIG WHERE ConfigName = 'AutoErpPlan' AND Type = 'BomCaculate' " \
		            "AND Valid = 'Y'"
		__sqlStr3 = "SELECT Valid FROM WG_DB.dbo.WG_CONFIG WHERE ConfigName = 'AutoErpPlan' AND Type = 'PzCaculate' " \
		            "AND Valid = 'Y'"
		__sqlStr4 = "SELECT Valid FROM WG_DB.dbo.WG_CONFIG WHERE ConfigName = 'AutoErpPlan' AND Type = 'LayoutScPlan' " \
		            "AND Valid = 'Y'"
		__sqlStr5 = "SELECT Valid FROM WG_DB.dbo.WG_CONFIG WHERE ConfigName = 'AutoErpPlan' AND Type = 'LayoutCgPlan' " \
		            "AND Valid = 'Y'"
		__sqlStr6 = "SELECT Valid FROM WG_DB.dbo.WG_CONFIG WHERE ConfigName = 'AutoErpPlan' AND Type = 'LockScPlan' " \
		            "AND Valid = 'Y'"
		__sqlStr7 = "SELECT Valid FROM WG_DB.dbo.WG_CONFIG WHERE ConfigName = 'AutoErpPlan' AND Type = 'LockCgPlan' " \
		            "AND Valid = 'Y'"
		__sqlStr8 = "SELECT Version FROM WG_DB.dbo.WG_CONFIG WHERE ConfigName = 'AutoErpPlan' AND Type = 'LrpCount' " \
		            "AND Valid = 'Y'"

		self.__workEnableFlag = True if self.__mssql.sqlWork(__sqlStr1) is not None else False
		self.__bomCalculateEnableFlag = True if self.__mssql.sqlWork(__sqlStr2) is not None else False
		self.__pzCalculateEnableFlag = True if self.__mssql.sqlWork(__sqlStr3) is not None else False
		self.__layoutScPlanEnableFlag = True if self.__mssql.sqlWork(__sqlStr4) is not None else False
		self.__layoutCgPlanEnableFlag = True if self.__mssql.sqlWork(__sqlStr5) is not None else False
		self.__lockScPlanEnableFlag = True if self.__mssql.sqlWork(__sqlStr6) is not None else False
		self.__lockCgPlanEnableFlag = True if self.__mssql.sqlWork(__sqlStr7) is not None else False
		self.__lrpCount = int(self.__mssql.sqlWork(__sqlStr8)[0][0]) if self.__mssql.sqlWork(__sqlStr8) is not None else 3
		
		self.__log("配置信息：全局使能锁：{0}, 计算低阶码：{1}，计算层级码：{2}，发放工单：{3}，发放请购单：{4}，最大执行次数：{5}".
		           format(self.__workEnableFlag, self.__bomCalculateEnableFlag, self.__pzCalculateEnableFlag,
		                  self.__layoutScPlanEnableFlag, self.__layoutCgPlanEnableFlag, str(self.__lrpCount)))
		
	# 重置状态为n,y的订单设置为N
	def __resetWorkingFlag(self):
		self.__log('还原LRPFLAG为n,y的状态')
		__sqlStr = "UPDATE dbo.COPTD SET LRPFLAG = 'N' WHERE LRPFLAG IN ('n', 'y') "
		self.__mssql.sqlWork(__sqlStr)
	
	# 重置已变更但工单未审的订单，不存在工单但状态为Y的订单
	def __resetWorkOtherFlag(self):
		self.__log('重置已变更但工单未审的订单，不存在工单但状态为Y的订单')
		__sqlStr = "DECLARE @WORKFLAG1 BIT, @TA001 VARCHAR(4), @TA002 VARCHAR(20), @TA026 VARCHAR(4), @TA027 VARCHAR(20), " \
		           "@TA028 VARCHAR(4), @LRPCOUNT INT " \
		           "" \
		           "UPDATE COMFORT.dbo.COPTD SET COPTD.LRPFLAG = 'N', LRPCOUNT = LRPCOUNT - 1 " \
		           "FROM COMFORT.dbo.COPTC " \
		           "INNER JOIN COMFORT.dbo.COPTD ON TD001 = TC001 AND TD002 = TC002 " \
		           "INNER JOIN COMFORT.dbo.INVMB ON MB001 = TD004 " \
		           "WHERE 1=1 " \
		           "AND COPTC.TC027 = 'Y' " \
		           "AND COPTD.UDF04 != 0 " \
		           "AND NOT EXISTS (SELECT 1 FROM COMFORT.dbo.MOCTA WHERE TA026 = TD001 AND TA027 = TD002 " \
		           "    AND TA028 = TD003 AND TA006 = TD004) " \
		           "AND NOT EXISTS (SELECT 1 FROM COMFORT.dbo.LRPLB WHERE LB002 = TD001 AND LB003 = TD002 " \
		           "    AND LB004 = TD003) " \
		           "AND COPTD.LRPFLAG = 'Y' " \
		           "AND COPTD.TD016 = 'N' " \
		           "AND INVMB.MB025 NOT IN ('P') " \
		           "AND COPTC.TC003 >= '20200301' " \
		           "" \
		           "SET @WORKFLAG1=1 " \
		           "WHILE(@WORKFLAG1=1) " \
		           "BEGIN " \
		           "    SET @TA001 = '' " \
		           "	SET @TA002 = '' " \
		           "	SET @TA026 = '' " \
		           "	SET @TA027 = '' " \
		           "	SET @TA028 = '' " \
		           "	IF EXISTS(SELECT TD001, TD002, TD003, TA001, TA002 " \
		           "        FROM COMFORT.dbo.COPTD " \
		           "        INNER JOIN COMFORT.dbo.MOCTA ON TA026 = TD001 AND TA027 = TD002 AND TA028 = TD003 " \
		           "        WHERE 1=1 " \
		           "        AND LRPDATE < COPTD.UDF12 " \
		           "        AND TA013 = 'N' " \
		           "        AND TA033 LIKE 'A%' " \
		           "        AND SUBSTRING(MOCTA.CREATE_DATE, 1, 8) >= '20200301' ) " \
		           "    BEGIN " \
		           "        SELECT TOP 1 @TA001=TA001, @TA002=TA002, @TA026=TA026, @TA027=TA027, " \
		           "            @TA028=TA028 FROM COMFORT.dbo.COPTD " \
		           "        INNER JOIN COMFORT.dbo.MOCTA ON TA026 = TD001 AND TA027 = TD002 AND TA028 = TD003 " \
		           "        WHERE 1=1 " \
		           "		AND LRPDATE < COPTD.UDF12 " \
		           "		AND TA013 = 'N' " \
		           "		AND TA033 LIKE 'A%' " \
		           "		AND SUBSTRING(MOCTA.CREATE_DATE, 1, 8) >= '20200301' " \
		           "		ORDER BY MOCTA.CREATE_DATE, TA033 " \
		           "" \
		           "        UPDATE COMFORT.dbo.COPTD SET LRPFLAG = 'N', LRPCOUNT = 0 WHERE TD001=@TA026 AND TD002=@TA027 " \
		           "            AND TD003=@TA028 " \
		           "        DELETE FROM COMFORT.dbo.MOCTB WHERE TB001=@TA001 AND TB002=@TA002 " \
		           "		DELETE FROM COMFORT.dbo.MOCTA WHERE TA001=@TA001 AND TA002=@TA002 " \
		           "	END " \
		           "	ELSE  " \
		           "	BEGIN  " \
		           "		SET @WORKFLAG1=0 " \
		           "	END  " \
		           "END "
		self.__mssql.sqlWork(__sqlStr)

	# 主逻辑
	def __work(self):
		# 获取需要处理的订单列表
		__getDd = self.__getDdList()
		if __getDd is not None:
			for __getDdTmp in __getDd:
				self.__log('Work With PlanDd:{planDd}  PlanId:{planId}'.format(planDd=__getDdTmp[0],
				                                                               planId=__getDdTmp[1]))
				
				# 设置订单处理中
				self.__setWorkingFlag(planDd=__getDdTmp[0])
				
				# 设置单个订单对否要发放请购单
				self.__layoutCgPlanEnableTmpFlag = True if __getDdTmp[3] == 'N' else False
				
				# 获取品号配置信息
				__phList = self.__getPhList(__getDdTmp[0])
				self.__hasKhpzFlag = True if __phList[0][1] != '' else False
				
				# 计算低阶码、层级码
				self.__calculate(__phList)
				
				# 生成LRP计划
				self.__generate(planDd=__getDdTmp[0], planId=__getDdTmp[1])
				
				if (self.__checkPlanBomError(planId=__getDdTmp[1]) or self.__checkPlanNoneError(planId=__getDdTmp[1])) \
						and int(__getDdTmp[2]) + 1 != self.__lrpCount and self.__hasKhpzFlag:
					self.__setWorkFalseFlag(planDd=__getDdTmp[0])
				else:
					if int(__getDdTmp[2]) + 1 == self.__lrpCount:
						self.__log('当前订单执行LRP次数将达到配置上限{0}次，视为订单使用标准BOM配置'.format(str(self.__lrpCount)))
						
					if not self.__hasKhpzFlag:
						self.__log('当前订单无客户配置')
						
					# 锁定计划
					self.__lockPlan(planId=__getDdTmp[1])
					
					# 发放计划
					self.__layoutPlan(planId=__getDdTmp[1])
					
					# 设置订单已完成
					self.__setWorkDoneFlag(planDd=__getDdTmp[0])
				
				# 清除计划
				self.__cleanPlan(planId=__getDdTmp[1])
		else:
			self.workingFlag = False
			self.__log('Not Found Order List!')
			
	def __getDdList(self):
		__sqlStr = "SELECT TOP 1 planDd, planId, LRPCOUNT, CG FROM V_GetAutoErpPlanOrderDetail ORDER BY UDF12, planDd "
		__getDd = self.__mssql.sqlWork(__sqlStr)
		return __getDd

	# 获取需要处理的订单列表
	def __getJobId(self):
		__sqlStr = "DECLARE @NYR VARCHAR(20), @XH INT " \
		           "SELECT @NYR = CONVERT(VARCHAR(20), GETDATE(), 112) " \
		           "IF EXISTS(SELECT * FROM DSCSYS.dbo.JOBQUEUE WHERE SUBSTRING(JOBID, 1, 8) = @NYR ) " \
		           "BEGIN " \
		           "	SELECT  @XH = CONVERT(INT, SUBSTRING(MAX(JOBID), 9, 6)) FROM DSCSYS.dbo.JOBQUEUE " \
		           "        WHERE SUBSTRING(JOBID, 1, 8) = @NYR " \
		           "END " \
		           "ELSE " \
		           "BEGIN " \
		           "	SET @XH = 0 " \
		           "END " \
		           "SELECT @NYR + RIGHT('000000' + CAST(@XH + 1 AS VARCHAR(6)), 6) AS JOBID, @NYR + '0001' AS SUBID  "
		
		__getData = self.__mssql.sqlWork(__sqlStr)
		if __getData is not None:
			return __getData[0]
		else:
			raise AutoErpPlanHelperException('Can not get job Id, Please check the program!')
	
	# 写入派班任务
	def __insertJob(self, jobName, jobOption, progName='', creator='Robot'):
		__sqlStrIns = "INSERT INTO DSCSYS.dbo.JOBQUEUE ([JOBID], [SUBID], [COMPANYID], [USERID], [USEDALIAS], [JOBNAME], " \
		              "[EXTNAME], [COMPROGID], [JOBOPTION], [GENTYPE], [GENSTATUS], [PRIORITY], [STATUS], [PROGRESS], " \
		              "[DTREQUEST], [DTRECEIVE], [DTSCHEDULE], [DTSTART], [DTFINISH], [RESULT], [STYLE], [PROCESSER], " \
		              "[FLAG], [NOTIFY]) " \
		              "VALUES ('{jobId}', '{subId}', 'COMFORT', '{creator}', 'COMFORT', '{jobName}', '', " \
		              "'{progName}', {hexStr}, 1, 1, 3, 'N', NULL, getdate(), getdate(), getdate(), " \
		              "NULL, NULL, NULL, 'B', '', 1, '');"

		__progName = jobName + 'S.Class1' if progName == '' else progName

		__jobId = []

		try:
			__jobId = self.__getJobId()
			self.__mssql.sqlWork(__sqlStrIns.format(hexStr=jobOption, jobId=__jobId[0], subId=__jobId[1],
			                                        creator=creator, jobName=jobName, progName=__progName))
		except:
			__jobId = self.__getJobId()
			self.__mssql.sqlWork(__sqlStrIns.format(hexStr=jobOption, jobId=__jobId[0], subId=__jobId[1],
			                                        creator=creator, jobName=jobName, progName=__progName))

		return __jobId[0]
	
	# 判断job是否完成
	def __checkJobDone(self, jobId):
		__sqlStr = "SELECT JOBID FROM DSCSYS.dbo.JOBQUEUE WHERE JOBID = '{jobId}' AND STATUS != 'D' "
		__getData = []
		while __getData is not None:
			sleep(0.5)
			__getData = self.__mssql.sqlWork(__sqlStr.format(jobId=jobId))
		self.__log('Job Done: {}'.format('JobId:' + str(jobId)))

	# 获取品名，配置名
	def __getPhList(self, dd):
		__sqlStr = "SELECT DISTINCT RTRIM(TD004), ISNULL(RTRIM(TD053), '') FROM COMFORT.dbo.COPTD " \
		           "INNER JOIN COMFORT.dbo.INVMB ON TD004 = MB001 " \
		           "WHERE TD001+'-'+TD002+TD003 = '{dd}' " \
		           "AND MB025 NOT IN ('P') "
		__get = self.__mssql.sqlWork(__sqlStr.format(dd=dd))
		return __get

	# 计算低阶码、层级码
	def __calculate(self, phList=None):
		if phList is not None:
			self.__log('Calculate PhList: {}'.format(str(phList)))
			for phListTmp in phList:
				if self.__bomCalculateEnableFlag:
					jobId = self.__bomSingleCalculate(phListTmp[0])
					self.__checkJobDone(jobId)

				if self.__pzCalculateEnableFlag:
					if phListTmp[1] is not None:
						jobId = self.__pzSingleCalculate01(phListTmp[0], phListTmp[1])
						self.__checkJobDone(jobId)
		else:
			self.__log('Calculate: Not Found PhList!', mode='warning')

	def __bomSingleCalculate(self, ph):
		hexStr = "0x44532056415249414E54202030313030380100000C2000000100000000000000010000000C2000000100000001000000" \
		         "030000000C20000001000000000000000100000008000000060000000990E9623B4EF64EC154F753080000000400000073" \
		         "007000300031000C20000001000000000000000100000008000000070000001F7510624C006F0067008765636808000000" \
		         "06000000630068006B004C006F0067000C20000001000000000000000100000008000000040000005C4F1A4EE5651F6708" \
		         "0000000B000000650064005000720069006E00740044006100740065000C2000000100000001000000030000000C200000" \
		         "0100000000000000020000000800000001000000040008000000{phLen}0000{ph}08000000{phLen}0000{ph}08000000" \
		         "010000004E000800000000000000"

		phStr = self.__str_to_hex(ph)
		phLenStr = self.__int_to_hex(len(ph))

		__jobId = self.__insertJob(jobName='BOMB05', jobOption=hexStr.format(ph=phStr, phLen=phLenStr))

		self.__log('Insert Job BomCalculate: {}'.format('品号 :' + str(ph) + ' - JobId: ' + str(__jobId)))
		return __jobId

	def __pzSingleCalculate01(self, ph, pz):
		phStr = self.__str_to_hex(ph)
		phLenStr = self.__int_to_hex(len(ph))
		pzStr = self.__str_to_hex(pz)
		pzLenStr = self.__int_to_hex(len(pz))

		hexStr = "0x44532056415249414E54202030313030740100000C2000000100000000000000010000000C2000000100000001000000" \
		         "040000000C2000000100000000000000010000000800000002000000C154F753080000000400000065006400300031000C" \
		         "20000001000000000000000100000008000000060000000990E9624D916E7FB96548680800000004000000730070003000" \
		         "31000C20000001000000000000000100000008000000070000001F7510624C006F00670087656368080000000600000063" \
		         "0068006B004C006F0067000C20000001000000000000000100000008000000040000005C4F1A4EE5651F67080000000B00" \
		         "0000650064005000720069006E00740044006100740065000C20000001000000010000000400000008000000{phLen}000" \
		         "0{ph}0C200000010000000000000001000000080000000100000005000C20000001000000000000000000000008000000" \
		         "{pzLen}0000{pz}08000000010000004E000800000000000000"

		__jobId = self.__insertJob(jobName='COPAB01', jobOption=hexStr.format(ph=phStr, phLen=phLenStr, pz=pzStr,
		                                                                      pzLen=pzLenStr))

		self.__log('Insert Job PzCalculate: {}'.format('品号: ' + str(ph) + ' - 配置: ' + str(pz) + ' - JobId: '
		                                               + str(__jobId)))

		return __jobId

	# 生成LRP计划
	def __generate(self, planDd, planId):
		__jobId = self.__generatePlanDetail(planId=planId, planDd=planDd)
		self.__checkJobDone(__jobId)

	def __generatePlanDetail(self, planDd, planId):
		hexStrBoth = "0x44532056415249414E54202030313030C40700000C2000000100000000000000010000000C20000001000000010000" \
		             "00180000000C20000001000000000000000100000008000000060000000990E962A18B12529D4F6E6308000000050000" \
		             "00630062006F00300031000C20000001000000000000000100000008000000040000000990E962E55D82530800000004" \
		             "00000065006400300032000C20000001000000000000000100000008000000060000000990E9626567906E167FF75308" \
		             "0000000400000073007000300033000C2000000100000000000000010000000800000006000000938F6551A18B125279" \
		             "62F75308000000050000006D0065006400300034000C20000001000000000000000100000008000000040000000990E9" \
		             "62D34E935E080000000400000073007000300035000C20000001000000000000000100000008000000060000000990E9" \
		             "626588278D3F65567B0800000005000000630062006F00300036000C2000000100000000000000010000000800000006" \
		             "0000000097426CA18B977BB9650F5F0800000005000000720064006700300037000C2000000100000000000000010000" \
		             "00080000000600000003805186895B6851585BCF910800000005000000630068006B00300038000C2000000100000000" \
		             "00000001000000080000000C0000000097426CE5651F670E5484769B4FD97EB37E6551A18B977B080000000600000063" \
		             "0068006B003000380031000C200000010000000000000001000000080000000C0000000097426CE5651F670E54847600" \
		             "97426CB37E6551A18B977B0800000006000000630068006B003000380032000C20000001000000000000000100000008" \
		             "000000080000000990E96200971F7510628476A18B12520800000005000000630062006F00300039000C200000010000" \
		             "000000000001000000080000000C000000F95B8E4EF25DD1533E659965F64E847665884551B9650F5F08000000050000" \
		             "00630062006F00310030000C20000001000000000000000100000008000000090000001F7510620097426C3A4EF69684" \
		             "769965F64E0800000005000000630068006B00310031000C2000000100000000000000010000000800000008000000D6" \
		             "53FF66E34E9965B37E6551A18B977B0800000005000000630068006B00310032000C2000000100000000000000010000" \
		             "000800000008000000A25B37629B4F9965B37E6551A18B977B0800000007000000630068006B00300037005F0031000C" \
		             "200000010000000000000001000000080000000B0000000990E9624D0050005300A18B1252005FE55DE5651F67080000" \
		             "000400000073007000310036000C2000000100000000000000010000000800000005000000038051865F631780877308" \
		             "00000005000000630068006B00310033000C2000000100000000000000010000000800000005000000A18B977B5D4E27" \
		             "59CF910800000005000000630068006B00300039000C2000000100000000000000010000000800000008000000085476" \
		             "5EA18B977B00674E4F6588CF910800000005000000630068006B00310034000C20000001000000000000000100000008" \
		             "000000070000004151B88BF76D7962D653FF66E34E0800000005000000630068006B00310035000C2000000100000000" \
		             "00000001000000080000000200000048722C67080000000400000065006400310036000C200000010000000000000001" \
		             "00000008000000020000002760288D0800000005000000630062006F00310037000C2000000100000000000000010000" \
		             "0008000000070000001F7510624C006F006700876563680800000006000000630068006B004C006F0067000C20000001" \
		             "000000000000000100000008000000040000005C4F1A4EE5651F67080000000B000000650064005000720069006E0074" \
		             "0044006100740065000C2000000100000001000000180000000C20000001000000000000000100000003000000010000" \
		             "00080000000400000031002E00A28B55530800000002000000300031000C200000010000000000000001000000080000" \
		             "000100000005000C20000001000000000000000000000008000000{planDdLen}0000{planDd}08000000{planIdLen}" \
		             "0000{planId}0C200000010000000000000000000000080000000100000005000C200000010000000000000001000000" \
		             "08000000010000004C0008000000080000004C002E0009634C00520050000097426C0C20000001000000000000000100" \
		             "000003000000020000000800000003000000DB6B0097426C0800000001000000590008000000010000004E0008000000" \
		             "010000004E000C2000000100000000000000010000000300000003000000080000000400000033002E006851E8900C20" \
		             "00000100000000000000010000000300000002000000080000000600000032002E00CD91B06565884551080000000100" \
		             "00004E0008000000010000004E0008000000010000004E000C2000000100000000000000020000000800000001000000" \
		             "04000800000000000000080000000000000008000000010000004E0008000000010000004E0008000000010000004E00" \
		             "08000000010000004E00080000000400000030003000300031000C200000010000000000000001000000030000000100" \
		             "0000080000000400000031002E0009674865080000000100000059000800000000000000"

		planDdStr = self.__str_to_hex(str(planDd))
		planDdLenStr = self.__int_to_hex(len(str(planDd)))
		planIdStr = self.__str_to_hex(str(planId))
		planIdLenStr = self.__int_to_hex(len(str(planId)))

		__jobId = self.__insertJob(jobName='LRPMB01', jobOption=hexStrBoth.format(planDd=planDdStr,
		                                                                          planDdLen=planDdLenStr,
		                                                                          planId=planIdStr,
		                                                                          planIdLen=planIdLenStr))

		self.__log('Insert Job Generate Plan: planDd: {0}  planId: {1}'.format(str(planDd), str(planId)))
		return __jobId
	
	# 检查是否为标准BOM， 是返回True
	def __checkPlanBomError(self, planId):
		__sqlStr = r"SELECT LRP, CP, PH, GY FROM (" \
		           r"   SELECT TA.TA001 AS LRP, TA.TA002 AS CP, TB.TB005 AS PH, TB.TB006 AS GY FROM dbo.LRPTA AS TA " \
		           r"   INNER JOIN dbo.LRPTB AS TB ON TA.TA001 = TB.TB001 AND TA.TA028 = TB.TB013 AND TA.TA002 = TB.TB002 " \
		           r"   INNER JOIN dbo.COPTD AS TD ON TD.TD001 = TA.TA023 AND TD.TD002 = TA.TA024 AND TD.TD003 = TA.TA025 " \
		           r"AND TA.TA002 = TD.TD004 " \
		           r"   WHERE TA010 = '5101' AND TA001 = '{planId}' " \
		           r"   UNION " \
		           r"   SELECT TA.TA001 AS LRP, TA.TA002 AS CP, BL.CB005 AS PH, BL.CB011 AS GY FROM dbo.LRPTA AS TA " \
		           r"   INNER JOIN dbo.COPTD AS TD ON TD.TD001 = TA.TA023 AND TD.TD002 = TA.TA024 AND TD.TD003 = TA.TA025 " \
		           r"AND TA.TA002 = TD.TD004 " \
		           r"   INNER JOIN dbo.BOMCB_List AS BL ON BL.CB001 = TA.TA002  " \
		           r"   WHERE TA010 = '5101' AND TA001 = '{planId}' " \
		           r") AS UN " \
		           r"WHERE 1=1 " \
		           r"AND ( " \
		           r"	NOT EXISTS(SELECT 1 FROM dbo.BOMCB_List AS BL1 WHERE BL1.CB001=CP AND BL1.CB005=PH AND BL1.CB011=GY) " \
		           r"   OR " \
		           r"	NOT EXISTS(SELECT 1 FROM dbo.LRPTA AS TA " \
		           r"		INNER JOIN dbo.LRPTB AS TB ON TA.TA001 = TB.TB001 AND TA.TA028 = TB.TB013 " \
		           r"AND TA.TA002 = TB.TB002 AND TA010 = '5101' " \
		           r"		INNER JOIN dbo.COPTD AS TD ON TD.TD001 = TA.TA023 AND TD.TD002 = TA.TA024 " \
		           r"AND TD.TD003 = TA.TA025 AND TA.TA002 = TD.TD004 " \
		           r"		WHERE TA.TA001=LRP)" \
		           r") "
		__get = self.__mssql.sqlWork(__sqlStr.format(planId=planId))
		
		if __get is None:
			self.__log('计划为标准BOM物料')
			
		return True if __get is None else False
		
	# 检查计划为空，空返回True
	def __checkPlanNoneError(self, planId):
		__sqlStr = r"SELECT TA.TA001 AS LRP, TA.TA002 AS CP, TB.TB005 AS PH, TB.TB006 AS GY FROM dbo.LRPTA AS TA " \
		           r"INNER JOIN dbo.LRPTB AS TB ON TA.TA001 = TB.TB001 AND TA.TA028 = TB.TB013 AND TA.TA002 = TB.TB002 " \
		           r"INNER JOIN dbo.COPTD AS TD ON TD.TD001 = TA.TA023 AND TD.TD002 = TA.TA024 AND TD.TD003 = TA.TA025 " \
		           r"AND TA.TA002 = TD.TD004 " \
		           r"WHERE TA010 = '5101' AND TA001 = '{planId}' "
		__get = self.__mssql.sqlWork(__sqlStr.format(planId=planId))
		
		if __get is None:
			self.__log('计划为空')
		
		return True if __get is None else False

	# 锁定计划
	def __lockPlan(self, planId, planVer='0001'):
		planId2 = planId.ljust(20, ' ')
		if self.__lockScPlanEnableFlag:
			__jobId = self.__lockScPlan(planId=planId2, planVer=planVer)
			self.__checkJobDone(__jobId)
		if self.__lockCgPlanEnableFlag:
			__jobId = self.__lockCgPlan(planId=planId2, planVer=planVer)
			self.__checkJobDone(__jobId)

	def __lockScPlan(self, planId, planVer):
		hexStr = "0x44532056415249414E54202030313030AE0400000C2000000100000000000000010000000C20000001000000010000000E" \
		         "0000000C20000001000000000000000100000008000000040000000990E962C154F753080000000400000073007000300031" \
		         "000C20000001000000000000000100000008000000040000000990E962E55D8253080000000400000065006400300032000C" \
		         "20000001000000000000000100000008000000040000000990E962D34E935E080000000400000073007000300033000C2000" \
		         "0001000000000000000100000008000000050000000990E9628C5BE55DE565080000000400000073007000300034000C2000" \
		         "0001000000000000000100000008000000060000000990E962A18B12527962F753080000000400000073007000300035000C" \
		         "20000001000000000000000100000008000000060000000990E962E55D555355532B52080000000400000065006400300036" \
		         "000C20000001000000000000000100000008000000060000000990E962A18B1252BA4E585408000000040000006500640030" \
		         "0037000C20000001000000000000000100000008000000060000000990E96201959A5BB67201600800000005000000720064" \
		         "006700300038000C200000010000000000000001000000080000000B000000C54E8894F95BC6620652B08B555FDB8F4C8801" \
		         "959A5B0800000005000000630068006B00300039000C200000010000000000000001000000080000000B000000C54E8894F9" \
		         "5BC6620652B08B555FD653886D01959A5B0800000005000000630068006B00310030000C2000000100000000000000010000" \
		         "0008000000070000000C54656B01959A5BA74E1062C1540800000005000000630068006B00310031000C2000000100000000" \
		         "0000000100000008000000090000000C54656BD653886D01959A5BA74E1062C1540800000005000000630068006B00310032" \
		         "000C20000001000000000000000100000008000000070000001F7510624C006F006700876563680800000006000000630068" \
		         "006B004C006F0067000C20000001000000000000000100000008000000040000005C4F1A4EE5651F67080000000B00000065" \
		         "0064005000720069006E00740044006100740065000C20000001000000010000000E0000000C200000010000000000000002" \
		         "000000080000000100000004000800000000000000080000000000000008000000000000000C200000010000000000000002" \
		         "00000008000000010000000400080000000000000008000000000000000C2000000100000000000000020000000800000001" \
		         "0000000400080000000000000008000000000000000C20000001000000000000000200000008000000010000000400080000" \
		         "0018000000{planId}{planVer}0800000018000000{planId}{planVer}080000000000000008000000000000000C200000" \
		         "0100000000000000010000000300000001000000080000000200000001959A5B08000000010000004E000800000001000000" \
		         "4E0008000000010000004E0008000000010000004E0008000000010000004E000800000000000000"

		planIdStr = self.__str_to_hex(str(planId))
		planVerStr = self.__str_to_hex(str(planVer))

		__jobId = self.__insertJob(jobName='LRPB02', jobOption=hexStr.format(planId=planIdStr, planVer=planVerStr))

		self.__log('Insert Job Lock SC Plan: {}'.format(str(planId)))
		return __jobId

	def __lockCgPlan(self, planId, planVer):
		hexStr = "0x44532056415249414E54202030313030B00300000C2000000100000000000000010000000C20000001000000010000000A" \
		         "0000000C20000001000000000000000100000008000000040000000990E962C154F753080000000400000073007000300031" \
		         "000C20000001000000000000000100000008000000040000000990E962E55D8253080000000400000065006400300032000C" \
		         "20000001000000000000000100000008000000040000000990E962D34E935E080000000400000073007000300033000C2000" \
		         "0001000000000000000100000008000000050000000990E962A44E278DE565080000000400000073007000300034000C2000" \
		         "0001000000000000000100000008000000050000000990E962C7912D8DE565080000000400000073007000300035000C2000" \
		         "0001000000000000000100000008000000060000000990E962A18B12527962F753080000000400000073007000300036000C" \
		         "20000001000000000000000100000008000000060000000990E962A18B1252BA4E5854080000000400000065006400300037" \
		         "000C20000001000000000000000100000008000000060000000990E96201959A5BB672016008000000040000007200670030" \
		         "0038000C20000001000000000000000100000008000000070000001F7510624C006F00670087656368080000000600000063" \
		         "0068006B004C006F0067000C20000001000000000000000100000008000000040000005C4F1A4EE5651F67080000000B0000" \
		         "00650064005000720069006E00740044006100740065000C20000001000000010000000A0000000C20000001000000000000" \
		         "0002000000080000000100000004000800000000000000080000000000000008000000000000000C20000001000000000000" \
		         "000200000008000000010000000400080000000000000008000000000000000C200000010000000000000002000000080000" \
		         "00010000000400080000000000000008000000000000000C2000000100000000000000020000000800000001000000040008" \
		         "0000000000000008000000000000000C200000010000000000000002000000080000000100000004000800000018000000" \
		         "{planId}{planVer}0800000018000000{planId}{planVer}08000000000000000C20000001000000000000000100000003" \
		         "00000001000000080000000200000001959A5B08000000010000004E000800000000000000"

		planIdStr = self.__str_to_hex(str(planId))
		planVerStr = self.__str_to_hex(str(planVer))

		__jobId = self.__insertJob(jobName='LRPB04', jobOption=hexStr.format(planId=planIdStr, planVer=planVerStr))

		self.__log('Insert Job Lock CG Plan: {}'.format(str(planId)))
		return __jobId

	# 发放计划
	def __layoutPlan(self, planId, planVer='0001'):
		if self.__layoutScPlanEnableFlag:
			__jobId = self.__layoutScPlan(planId=planId, planVer=planVer)
			self.__checkJobDone(__jobId)
		if self.__layoutCgPlanEnableFlag and self.__layoutCgPlanEnableTmpFlag:
			__jobId = self.__layoutCgPlan(planId=planId, planVer=planVer)
			self.__checkJobDone(__jobId)

	def __layoutScPlan(self, planId, planVer):
		hexStr = "0x44532056415249414E54202030313030C20500000C2000000100000000000000010000000C200000010000000100000011" \
		         "0000000C20000001000000000000000100000008000000040000000990E962C154F753080000000400000073007000300031" \
		         "000C20000001000000000000000100000008000000050000000990E9628C5BE55DE565080000000400000073007000300032" \
		         "000C20000001000000000000000100000008000000060000000990E962A18B12527962F75308000000040000007300700030" \
		         "0033000C20000001000000000000000100000008000000040000000990E962E55D8253080000000400000065006400300034" \
		         "000C20000001000000000000000100000008000000060000000990E9621F75A74ED34E935E08000000040000007300700030" \
		         "0035000C20000001000000000000000100000008000000040000000990E962B6720160080000000400000072006700300036" \
		         "000C20000001000000000000000100000008000000060000000990E962E55D555355532B5208000000040000006500640030" \
		         "0037000C20000001000000000000000100000008000000060000000990E962E55D55532760288D0800000005000000630062" \
		         "006F00300038000C20000001000000000000000100000008000000060000000990E962A18B1252BA4E585408000000040000" \
		         "0065006400300039000C20000001000000000000000100000008000000100000000C54A18B12527962F7532C00C154F75320" \
		         "000854765E10620C54004EE55D55530800000005000000630068006B00310030000C20000001000000000000000100000008" \
		         "0000000E000000D1533E65D4591659E55D55538476D45916595553F74E3A4EF69605800800000005000000630068006B0031" \
		         "0031000C200000010000000000000001000000080000001F00000042004F004D002C00005FE55D2C008498A18B86989965E5" \
		         "652C008C5BE55DE5650F5C8E4ED1533E65E5651F67F46639650E4ED1533E65E5651F67F8760C540800000005000000630068" \
		         "006B00310032000C2000000100000000000000010000000800000006000000938F6551D1533E65E5651F6708000000040000" \
		         "006D006500310033000C2000000100000000000000010000000800000006000000D1533E6592638F5E9D4F6E630800000007" \
		         "000000630062006F00300039005F0031000C2000000100000000000000010000000800000004000000CD91D6535553F74E08" \
		         "00000005000000630068006B00310034000C20000001000000000000000100000008000000070000001F7510624C006F0067" \
		         "00876563680800000006000000630068006B004C006F0067000C20000001000000000000000100000008000000040000005C" \
		         "4F1A4EE5651F67080000000B000000650064005000720069006E00740044006100740065000C200000010000000100000011" \
		         "0000000C20000001000000000000000200000008000000010000000400080000000000000008000000000000000C20000001" \
		         "000000000000000200000008000000010000000400080000000000000008000000000000000C200000010000000000000001" \
		         "000000080000000100000005000C2000000100000000000000000000000800000018000000{planId}{planVer}080000000" \
		         "00000000C20000001000000000000000200000008000000010000000400080000000000000008000000000000000C2000000" \
		         "10000000000000001000000030000000200000008000000020000006851E89008000000000000000C2000000100000000000" \
		         "00001000000030000000300000008000000020000006851E890080000000000000008000000010000004E000800000001000" \
		         "0004E00080000000100000059000800000008000000{dateStr}0C20000001000000000000000" \
		         "100000003000000010000000800000004000000A18B12527962F75308000000010000004E0008000000010000004E0008000" \
		         "00000000000"

		planIdStr = self.__str_to_hex(planId.ljust(20, ' '))
		planVerStr = self.__str_to_hex(str(planVer))
		dateStr = self.__str_to_hex(str(dt.now().strftime('%Y%m%d')))

		__jobId = self.__insertJob(jobName='LRPMB03', jobOption=hexStr.format(planId=planIdStr, planVer=planVerStr,
		                                                                      dateStr=dateStr))

		self.__log('Insert Job Layout Sc Plan: {}'.format(str(planId)))
		return __jobId

	def __layoutCgPlan(self, planId, planVer):
		hexStr = "0x44532056415249414E54202030313030900800000C2000000100000000000000010000000C20000001000000010000001C00" \
		         "00000C20000001000000000000000100000008000000050000000990E9629B4F945E4655080000000400000073007000300031" \
		         "000C20000001000000000000000100000008000000040000000990E962C154F753080000000400000073007000300032000C20" \
		         "000001000000000000000100000008000000050000000990E962C7912D8DE565080000000400000073007000300033000C2000" \
		         "0001000000000000000100000008000000060000000990E962A18B12527962F753080000000400000073007000300034000C20" \
		         "000001000000000000000100000008000000040000000990E962E55D8253080000000400000065006400300035000C20000001" \
		         "000000000000000100000008000000060000000990E9621F75A74ED34E935E080000000400000073007000300036000C200000" \
		         "01000000000000000100000008000000040000000990E962015ECD79080000000400000065006400300037000C200000010000" \
		         "00000000000100000008000000040000000990E962B6720160080000000400000072006700300038000C200000010000000000" \
		         "00000100000008000000060000000990E962A18B1252BA4E5854080000000400000065006400300039000C2000000100000000" \
		         "0000000100000008000000060000000990E962D1533E65B9650F5F0800000005000000630062006F00310030000C2000000100" \
		         "00000000000001000000080000000B000000D1533E65C7912D8D5553F74E3A4EF6968476A18B12520800000005000000630068" \
		         "006B00310031000C20000001000000000000000100000008000000130000008498A44E278DE5650F5C8E4ED1533E65E5651F67" \
		         "F46639650E4ED1533E65E5651F67F8760C540800000005000000630068006B00310032000C2000000100000000000000010000" \
		         "000800000004000000938F655155532B52080000000400000065006400310033000C2000000100000000000000010000000800" \
		         "00000600000007639A5BD1533E65E5651F6708000000040000006D006500310034000C20000001000000000000000100000008" \
		         "00000008000000938F655107639A5BC7912D8DBA4E5854080000000400000065006400310035000C2000000100000000000000" \
		         "010000000800000008000000C7912D8DA18B1252D1533E659D4F6E63080000000400000065006400310036000C200000010000" \
		         "00000000000100000008000000060000000963C7912D8DE565D1533E650800000005000000630068006B00310037000C200000" \
		         "01000000000000000100000008000000080000000990E962C7912D8DBA4E5854B9650F5F0800000005000000630062006F0032" \
		         "0030000C20000001000000000000000100000008000000080000000990E962C154F753C7912D8DBA4E58540800000004000000" \
		         "73007000310038000C2000000100000000000000010000000800000006000000938F6551F78B2D8DBA4E585408000000040000" \
		         "0065006400310039000C2000000100000000000000010000000800000004000000CD91D6535553F74E08000000050000006300" \
		         "68006B00320031000C2000000100000000000000010000000800000006000000938F6551416D0B7A167FF75308000000040000" \
		         "0065006400320033000C2000000100000000000000010000000800000006000000938F6551416D0B7A167FF753080000000400" \
		         "000065006400320033000C2000000100000000000000010000000800000008000000C7912D8D74655553476C3B60D653F74E08" \
		         "00000005000000630068006B00320032000C20000001000000000000000100000008000000060000000990E962C7912D8DBA4E" \
		         "5854080000000400000065006400320034000C200000010000000000000001000000080000000600000007639A5BC7912D8DBA" \
		         "4E58540800000005000000630068006B00320035000C20000001000000000000000100000008000000070000001F7510624C00" \
		         "6F006700876563680800000006000000630068006B004C006F0067000C20000001000000000000000100000008000000040000" \
		         "005C4F1A4EE5651F67080000000B000000650064005000720069006E00740044006100740065000C2000000100000001000000" \
		         "1C0000000C20000001000000000000000200000008000000010000000400080000000000000008000000000000000C20000001" \
		         "000000000000000200000008000000010000000400080000000000000008000000000000000C20000001000000000000000200" \
		         "000008000000010000000400080000000000000008000000000000000C20000001000000000000000100000008000000010000" \
		         "0005000C2000000100000000000000000000000800000018000000{planId}{planVer}08000000000000000C2000000100000" \
		         "00000000002000000080000000100000004000800000000000000080000000000000008000000000000000C200000010000000" \
		         "000000001000000030000000200000008000000020000006851E89008000000000000000C20000001000000000000000100000" \
		         "0030000000300000008000000040000005553EC72D1533E6508000000010000005900080000000100000059000800000004000" \
		         "00033003100300031000800000008000000{dateStr}08000000000000000800000001000000320008000000010000004E000C" \
		         "20000001000000000000000100000003000000010000000800000008000000938F655107639A5BC7912D8DBA4E58540C200000" \
		         "01000000000000000000000008000000010000000500080000000A0000003000300030003000360033007C0030003600310008" \
		         "000000010000004E000800000000000000080000000000000008000000010000004E0008000000000000000800000001000000" \
		         "4E0008000000010000004E000800000000000000"
		
		planIdStr = self.__str_to_hex(planId.ljust(20, ' '))
		planVerStr = self.__str_to_hex(str(planVer))
		dateStr = self.__str_to_hex(str(dt.now().strftime('%Y%m%d')))
		
		__jobId = self.__insertJob(jobName='LRPB05', jobOption=hexStr.format(planId=planIdStr, planVer=planVerStr,
		                                                                     dateStr=dateStr))
		
		self.__log('Insert Job Layout Cg Plan: {}'.format(str(planId)))
		return __jobId

	# 清除计划
	def __cleanPlan(self, planId, planVer='0001'):
		__jobId = self.__cleanAllPlan(planId=planId, planVer=planVer)
		self.__checkJobDone(__jobId)

	def __cleanAllPlan(self, planId, planVer):
		hexStr = "0x44532056415249414E54202030313030980500000C2000000100000000000000010000000C200000010000000100000011" \
		         "0000000C20000001000000000000000100000008000000040000001F75A74EA18B1252080000000600000067006200300031" \
		         "005F0031000C2000000100000000000000010000000800000004000000C7912D8DA18B125208000000060000006700620030" \
		         "0031005F0032000C2000000100000000000000010000000800000004000000A18B1252B08B555F0800000006000000670062" \
		         "00300031005F0033000C20000001000000000000000100000008000000040000000990E962B6720160080000000400000072" \
		         "006700300032000C20000001000000000000000100000008000000060000000990E962A18B12527962F75308000000040000" \
		         "0073007000300033000C20000001000000000000000100000008000000060000000990E962A18B1252E5651F670800000004" \
		         "00000073007000300034000C20000001000000000000000100000008000000040000000990E962C154F75308000000040000" \
		         "0073007000300035000C20000001000000000000000100000008000000090000000990E962A44E278DE5652F008C5BE55DE5" \
		         "65080000000400000073007000300036000C20000001000000000000000100000008000000040000000990E962E55D825308" \
		         "0000000400000065006400300037000C20000001000000000000000100000008000000040000000990E962D34E935E080000" \
		         "000400000073007000300038000C2000000100000000000000010000000800000003000000E55D5C4FF75308000000060000" \
		         "0067006200300031005F0034000C20000001000000000000000100000008000000040000000990E9622760288D0800000005" \
		         "000000630062006F00310031000C200000010000000000000001000000080000000C000000205264960C54004EA18B125279" \
		         "62F7534062096748722C670800000005000000630068006B00310032000C200000010000000000000001000000080000000B" \
		         "000000C54E20526496F25D6851E890D1533E658476A18B12520800000005000000630068006B00310033000C200000010000" \
		         "00000000000100000008000000050000000990E962E55D5C4FF753080000000400000073007000310035000C200000010000" \
		         "00000000000100000008000000070000001F7510624C006F006700876563680800000006000000630068006B004C006F0067" \
		         "000C20000001000000000000000100000008000000040000005C4F1A4EE5651F67080000000B000000650064005000720069" \
		         "006E00740044006100740065000C200000010000000100000011000000080000000100000059000800000001000000590008" \
		         "0000000100000059000C200000010000000000000001000000030000000200000008000000020000006851E8900C20000001" \
		         "0000000000000001000000080000000100000005000C2000000100000000000000000000000800000018000000" \
		         "{planId}{planVer}0C200000010000000000000002000000080000000100000004000800000000000000080000000000000" \
		         "00C20000001000000000000000200000008000000010000000400080000000000000008000000000000000C2000000100000" \
		         "0000000000200000008000000010000000400080000000000000008000000000000000800000002000000300031000C20000" \
		         "00100000000000000020000000800000001000000040008000000000000000800000000000000080000000100000059000C2" \
		         "000000100000000000000010000000300000004000000080000000400000034002E006851E89008000000010000004E00080" \
		         "00000010000004E000C200000010000000000000002000000080000000100000004000800000000000000080000000000000" \
		         "008000000010000004E000800000000000000"

		planIdStr = self.__str_to_hex(planId.ljust(20, ' '))
		planVerStr = self.__str_to_hex(str(planVer))

		__jobId = self.__insertJob(jobName='LRPB06', jobOption=hexStr.format(planId=planIdStr, planVer=planVerStr))
		self.__log('Insert Job Clean PlanId: {}'.format(str(planId)))
		return __jobId

	# 设置订单LRP计划的标志位
	def __setWorkingFlag(self, planDd):
		__sqlStr = "UPDATE COMFORT.dbo.COPTD SET LRPFLAG = 'y' WHERE TD001+'-'+TD002+TD003 = '{planDd}' "
		self.__mssql.sqlWork(__sqlStr.format(planDd=planDd))
		self.__log('Set Working Flag planDd: {0}'.format(planDd))

	def __setWorkDoneFlag(self, planDd):
		__sqlStr = "UPDATE COMFORT.dbo.COPTD SET LRPFLAG='Y', LRPDATE=LEFT(dbo.f_getTime(1), 12), LRPCOUNT=LRPCOUNT+1 " \
		           "WHERE TD001+'-'+TD002+TD003 = '{planDd}' "
		self.__mssql.sqlWork(__sqlStr.format(planDd=planDd))
		self.__log('Set Work Done Flag planDd: {0}'.format(planDd))

	def __setWorkFalseFlag(self, planDd):
		__sqlStr = "UPDATE COMFORT.dbo.COPTD SET LRPFLAG='n', LRPCOUNT=LRPCOUNT+1  " \
		           "WHERE TD001+'-'+TD002+TD003 = '{planDd}' "
		self.__mssql.sqlWork(__sqlStr.format(planDd=planDd))
		self.__log('Set Work False Flag planDd: {0}'.format(planDd))
